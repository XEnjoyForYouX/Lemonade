name: Lemonade CI Builds

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
    windows:
        runs-on: windows-latest
        strategy:
          matrix:
            target: ["msvc"]
        defaults:
          run:
            shell: ${{ (matrix.target == 'msys2' && 'msys2') || 'bash' }} {0}
        env:
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_COMPILERCHECK: content
          CCACHE_SLOPPINESS: time_macros
          OS: windows
          TARGET: ${{ matrix.target }}
        steps:
          - uses: actions/checkout@v4
            with:
              submodules: recursive
          - name: Set up cache
            uses: actions/cache@v4
            with:
              path: ${{ env.CCACHE_DIR }}
              key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
              restore-keys: |
                ${{ runner.os }}-${{ matrix.target }}-
          - name: Set up MSVC
            uses: ilammy/msvc-dev-cmd@v1
            if: ${{ matrix.target == 'msvc' }}
          - name: Install extra tools (MSVC)
            run: choco install ccache ninja wget
            if: ${{ matrix.target == 'msvc' }}
          - name: Set up MSYS2
            uses: msys2/setup-msys2@v2
            if: ${{ matrix.target == 'msys2' }}
            with:
              msystem: clang64
              update: true
              install: git make p7zip
              pacboy: >-
                toolchain:p ccache:p cmake:p ninja:p
                qt6-base:p qt6-multimedia:p qt6-multimedia-wmf:p qt6-tools:p qt6-translations:p
          - name: Disable line ending translation
            run: git config --global core.autocrlf input
          - name: Build
            run: ./.ci/windows.sh
          - name: Pack
            run: ./.ci/pack.sh
          - name: Upload
            uses: actions/upload-artifact@v4
            with:
              name: ${{ env.OS }}-${{ env.TARGET }}
              path: artifacts/
    linux:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          target: ["appimage", "fresh"]
      container:
        image: ishan09811/build-environments:linux-${{ matrix.target }}
        options: -u 1001
      env:
        CCACHE_DIR: ${{ github.workspace }}/.ccache
        CCACHE_COMPILERCHECK: content
        CCACHE_SLOPPINESS: time_macros
        OS: linux
        TARGET: ${{ matrix.target }}
      steps:
        - uses: actions/checkout@v4
          with:
            submodules: recursive
        - name: Set up cache
          uses: actions/cache@v4
          with:
            path: ${{ env.CCACHE_DIR }}
            key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
            restore-keys: |
              ${{ runner.os }}-${{ matrix.target }}-
        - name: Build
          run: | 
            chmod +x ./.ci/linux.sh
            ./.ci/linux.sh
        - name: Pack
          run: | 
             chmod +x ./.ci/pack.sh
             ./.ci/pack.sh
          if: ${{ matrix.target == 'appimage' }}
        - name: Upload
          uses: actions/upload-artifact@v4
          if: ${{ matrix.target == 'appimage' }}
          with:
            name: ${{ env.OS }}-${{ env.TARGET }}
            path: artifacts/
    Android-ARM64:
      runs-on: ubuntu-latest

      strategy:
        matrix:
          build_type:
            - release

      steps:
      - name: Set BUILD_TYPE variable
        run: echo "BUILD_TYPE=${{ matrix.build_type }}" >> $GITHUB_ENV

      - uses: actions/checkout@v4
      - name: Fetch submodules
        run: git submodule update --init --recursive

      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-android-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Deps
        run: |
            sudo add-apt-repository -y ppa:theofficialgman/gpu-tools
            sudo apt-get update -y
            sudo apt-get install ccache glslang-dev glslang-tools apksigner -y

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DENABLE_SDL2=OFF -DENABLE_SDL2_FRONTEND=OFF -DENABLE_QT=OFF

      - name: Build
        run: |
          # Build the project with CMake
          cmake --build ${{github.workspace}}/build --config ${{ env.BUILD_TYPE }}

          # Build the Android app with Gradle
          cd src/android
          ./gradlew assemble${{ env.BUILD_TYPE }}
          ls -R app/build/outputs
          cd ../..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Android-APK
          path: |
            ./src/android/app/build/outputs/apk/canary/${{ env.BUILD_TYPE }}/app-canary-${{ env.BUILD_TYPE }}.apk
